// API endpoint: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã
import { Redis } from '@upstash/redis';

const redis = new Redis({
    url: process.env.KV_REST_API_URL,
    token: process.env.KV_REST_API_TOKEN
});

// Rate limiting
const rateLimits = new Map();
const RATE_LIMIT_WINDOW = 60000;
const MAX_REQUESTS_PER_WINDOW = 100;
const MAX_PIXELS_PER_BATCH = 50;

// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function getCountryCode(lat, lng) {
    // –†–æ—Å—Å–∏—è
    if (lat > 41 && lat < 82 && lng > 27 && lng < 180) {
        if (lat > 50 || lng > 40) return 'RU';
    }
    // –°–®–ê
    if (lat > 24 && lat < 50 && lng > -130 && lng < -65) return 'US';
    // –ö–∞–Ω–∞–¥–∞
    if (lat > 45 && lat < 75 && lng > -140 && lng < -50) return 'CA';
    // –ë—Ä–∞–∑–∏–ª–∏—è
    if (lat > -35 && lat < 6 && lng > -74 && lng < -34) return 'BR';
    // –ö–∏—Ç–∞–π
    if (lat > 18 && lat < 54 && lng > 73 && lng < 135) return 'CN';
    // –ê–≤—Å—Ç—Ä–∞–ª–∏—è
    if (lat > -44 && lat < -10 && lng > 112 && lng < 154) return 'AU';
    // –ò–Ω–¥–∏—è
    if (lat > 6 && lat < 36 && lng > 68 && lng < 98) return 'IN';
    // –§—Ä–∞–Ω—Ü–∏—è
    if (lat > 41 && lat < 51.5 && lng > -5 && lng < 9.5) return 'FR';
    // –ì–µ—Ä–º–∞–Ω–∏—è
    if (lat > 47 && lat < 55.5 && lng > 5.5 && lng < 15.5) return 'DE';
    // –ò—Ç–∞–ª–∏—è
    if (lat > 35 && lat < 47.5 && lng > 6.5 && lng < 19) return 'IT';
    // –ò—Å–ø–∞–Ω–∏—è
    if (lat > 35.5 && lat < 44 && lng > -9.5 && lng < 4) return 'ES';
    // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
    if (lat > 49.5 && lat < 61 && lng > -8.5 && lng < 2) return 'GB';
    // –ü–æ–ª—å—à–∞
    if (lat > 49 && lat < 55 && lng > 14 && lng < 24.5) return 'PL';
    // –£–∫—Ä–∞–∏–Ω–∞
    if (lat > 44 && lat < 52.5 && lng > 22 && lng < 40.5) return 'UA';
    // –¢—É—Ä—Ü–∏—è
    if (lat > 35.5 && lat < 42.5 && lng > 25.5 && lng < 45) return 'TR';
    // –Ø–ø–æ–Ω–∏—è
    if (lat > 30 && lat < 46 && lng > 129 && lng < 146) return 'JP';
    // –ú–µ–∫—Å–∏–∫–∞
    if (lat > 14 && lat < 33 && lng > -118 && lng < -86) return 'MX';
    // –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞
    if (lat > -55 && lat < -21 && lng > -74 && lng < -53) return 'AR';
    // –ù–æ—Ä–≤–µ–≥–∏—è
    if (lat > 57 && lat < 72 && lng > 4 && lng < 32) {
        if (lng < 25 || lat > 68) return 'NO';
    }
    // –®–≤–µ—Ü–∏—è
    if (lat > 55 && lat < 69.5 && lng > 10.5 && lng < 24.5) return 'SE';
    // –§–∏–Ω–ª—è–Ω–¥–∏—è
    if (lat > 59.5 && lat < 70.5 && lng > 19 && lng < 32) return 'FI';
    
    return 'XX'; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
}

const countryNames = {
    'RU': 'üá∑üá∫ –†–æ—Å—Å–∏—è',
    'US': 'üá∫üá∏ –°–®–ê',
    'CA': 'üá®üá¶ –ö–∞–Ω–∞–¥–∞',
    'BR': 'üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è',
    'CN': 'üá®üá≥ –ö–∏—Ç–∞–π',
    'AU': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'IN': 'üáÆüá≥ –ò–Ω–¥–∏—è',
    'FR': 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è',
    'DE': 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
    'IT': 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
    'ES': 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è',
    'GB': 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
    'JP': 'üáØüáµ –Ø–ø–æ–Ω–∏—è',
    'MX': 'üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞',
    'AR': 'üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞',
    'NO': 'üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è',
    'SE': 'üá∏üá™ –®–≤–µ—Ü–∏—è',
    'FI': 'üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è',
    'PL': 'üáµüá± –ü–æ–ª—å—à–∞',
    'UA': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞',
    'TR': 'üáπüá∑ –¢—É—Ä—Ü–∏—è',
    'XX': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
};

export default async function handler(req, res) {
    // CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const { pixels, playerId } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!pixels || !Array.isArray(pixels)) {
            return res.status(400).json({ error: 'Invalid pixels data' });
        }
        
        if (pixels.length === 0) {
            return res.status(400).json({ error: 'Empty batch' });
        }
        
        if (pixels.length > MAX_PIXELS_PER_BATCH) {
            return res.status(400).json({ 
                error: `Batch too large. Maximum ${MAX_PIXELS_PER_BATCH} pixels per batch` 
            });
        }
        
        // Rate limiting
        const clientIp = req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown';
        const now = Date.now();
        
        for (const [ip, data] of rateLimits.entries()) {
            if (now - data.windowStart > RATE_LIMIT_WINDOW) {
                rateLimits.delete(ip);
            }
        }
        
        let ipData = rateLimits.get(clientIp);
        if (!ipData) {
            ipData = { windowStart: now, requests: 0 };
            rateLimits.set(clientIp, ipData);
        }
        
        if (now - ipData.windowStart <= RATE_LIMIT_WINDOW) {
            ipData.requests++;
            if (ipData.requests > MAX_REQUESTS_PER_WINDOW) {
                return res.status(429).json({ 
                    error: 'Rate limit exceeded',
                    retryAfter: Math.ceil((RATE_LIMIT_WINDOW - (now - ipData.windowStart)) / 1000)
                });
            }
        } else {
            ipData.windowStart = now;
            ipData.requests = 1;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        const timestamp = Date.now();
        const promises = [];
        
        for (const pixel of pixels) {
            if (!pixel.position || !pixel.color) continue;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
            const [lat, lng] = pixel.position.split(',').map(Number);
            const countryCode = getCountryCode(lat, lng);
            
            const pixelData = {
                position: pixel.position,  // –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º position –≤ –¥–∞–Ω–Ω—ã–µ!
                color: pixel.color,
                opacity: pixel.opacity || 0.6,
                playerId: playerId || 'anonymous',
                country: countryCode,
                timestamp: timestamp
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏–∫—Å–µ–ª—å (–í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON)
            promises.push(
                redis.hset('pixels:map', pixel.position, JSON.stringify(pixelData))
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞–Ω–∞+—Ü–≤–µ—Ç
            const countryColorKey = `${countryCode}:${pixel.color}`;
            promises.push(
                redis.hincrby('pixels:country:color', countryColorKey, 1)
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞–Ω—ã
            promises.push(
                redis.hincrby('pixels:country:total', countryCode, 1)
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–≤–µ—Ç–æ–≤
            promises.push(
                redis.hincrby('pixels:colors:count', pixel.color, 1)
            );
            
            // Timeline
            promises.push(
                redis.zadd('pixels:timeline', {
                    score: timestamp,
                    member: `${pixel.position}:${playerId}:${pixel.color}:${countryCode}`
                })
            );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        promises.push(
            redis.incrby('pixels:total', pixels.length)
        );
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await Promise.all(promises);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        const oneDayAgo = timestamp - (24 * 60 * 60 * 1000);
        await redis.zremrangebyscore('pixels:timeline', '-inf', oneDayAgo);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalPixels = await redis.get('pixels:total') || 0;
        
        res.status(200).json({
            success: true,
            processed: pixels.length,
            totalPixels: parseInt(totalPixels)
        });
        
    } catch (error) {
        console.error('Batch processing error:', error);
        res.status(500).json({ 
            error: 'Failed to process batch',
            message: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
}

export { countryNames };