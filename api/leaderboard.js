// API endpoint: –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
import { Redis } from '@upstash/redis';

const kv = new Redis({
  url: process.env.KV_REST_API_URL,
  token: process.env.KV_REST_API_TOKEN,
});

const COUNTRY_NAMES = {
  'RU': '–†–æ—Å—Å–∏—è',
  'FR': '–§—Ä–∞–Ω—Ü–∏—è',
  'DE': '–ì–µ—Ä–º–∞–Ω–∏—è',
  'IT': '–ò—Ç–∞–ª–∏—è',
  'ES': '–ò—Å–ø–∞–Ω–∏—è',
  'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
  'US': '–°–®–ê',
  'CN': '–ö–∏—Ç–∞–π',
  'BR': '–ë—Ä–∞–∑–∏–ª–∏—è',
  'AU': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
  'CA': '–ö–∞–Ω–∞–¥–∞',
  'IN': '–ò–Ω–¥–∏—è',
  'JP': '–Ø–ø–æ–Ω–∏—è'
};

const COUNTRY_FLAGS = {
  'RU': 'üá∑üá∫',
  'FR': 'üá´üá∑',
  'DE': 'üá©üá™',
  'IT': 'üáÆüáπ',
  'ES': 'üá™üá∏',
  'GB': 'üá¨üáß',
  'US': 'üá∫üá∏',
  'CN': 'üá®üá≥',
  'BR': 'üáßüá∑',
  'AU': 'üá¶üá∫',
  'CA': 'üá®üá¶',
  'IN': 'üáÆüá≥',
  'JP': 'üáØüáµ'
};

export default async function handler(req, res) {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    const countryStats = [];
    
    for (const code of Object.keys(COUNTRY_NAMES)) {
      const revealed = await kv.scard(`country:${code}:revealed`) || 0;
      
      if (revealed > 0) {
        const total = await kv.hget('country:totals', code) || 10000;
        const percentage = ((revealed / total) * 100).toFixed(2);
        
        countryStats.push({
          code,
          name: COUNTRY_NAMES[code],
          flag: COUNTRY_FLAGS[code] || 'üè≥Ô∏è',
          revealed,
          total: parseInt(total),
          percentage: parseFloat(percentage)
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
    countryStats.sort((a, b) => b.percentage - a.percentage);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    const userScores = await kv.hgetall('user:scores') || {};
    const users = Object.entries(userScores)
      .map(([userId, score]) => ({
        userId,
        username: userId.startsWith('user_') ? `Player${userId.slice(-4)}` : userId,
        score: parseInt(score)
      }))
      .sort((a, b) => b.score - a.score)
      .slice(0, 10);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    const recentReveals = await kv.zrange('revealed:timeline', -10, -1, {
      withScores: true,
      rev: true
    }) || [];
    
    const recentActivity = recentReveals.map(item => {
      if (!item || !item.member) return null;
      
      const [cellKey, userId, country] = item.member.split(':');
      const timestamp = new Date(item.score).toISOString();
      
      return {
        cellKey,
        userId: userId.startsWith('user_') ? `Player${userId.slice(-4)}` : userId,
        country: COUNTRY_NAMES[country] || country,
        flag: COUNTRY_FLAGS[country] || 'üè≥Ô∏è',
        timestamp
      };
    }).filter(Boolean);
    
    res.status(200).json({
      success: true,
      countries: countryStats.slice(0, 10),
      users: users,
      recentActivity: recentActivity,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error fetching leaderboard:', error);
    
    res.status(200).json({
      success: false,
      countries: [],
      users: [],
      recentActivity: [],
      error: process.env.NODE_ENV === 'development' ? error.message : 'Database error'
    });
  }
}