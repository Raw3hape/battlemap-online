// API endpoint: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–æ–∫ —Å —Ç–æ—á–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü
import { Redis } from '@upstash/redis';

const redis = new Redis({
    url: process.env.KV_REST_API_URL,
    token: process.env.KV_REST_API_TOKEN
});

// Rate limiting
const rateLimits = new Map();
const RATE_LIMIT_WINDOW = 60000;
const MAX_REQUESTS_PER_WINDOW = 100;
const MAX_CELLS_PER_BATCH = 50;

// –ö—ç—à –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
const geoCache = new Map();
const MAX_CACHE_SIZE = 10000;

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function quickWaterCheck(lat, lng) {
    // –¶–µ–Ω—Ç—Ä –¢–∏—Ö–æ–≥–æ –æ–∫–µ–∞–Ω–∞
    if (lat > -40 && lat < 40 && ((lng > 160 && lng <= 180) || (lng >= -180 && lng < -140))) {
        return true;
    }
    // –¶–µ–Ω—Ç—Ä –ê—Ç–ª–∞–Ω—Ç–∏–∫–∏
    if (lat > -40 && lat < 50 && lng > -50 && lng < -20) {
        // –ò—Å–∫–ª—é—á–∞–µ–º –±–µ—Ä–µ–≥–æ–≤—ã–µ –∑–æ–Ω—ã
        if (lat < 20 || lat > 40) return true;
    }
    // –ò–Ω–¥–∏–π—Å–∫–∏–π –æ–∫–µ–∞–Ω
    if (lat > -40 && lat < 0 && lng > 50 && lng < 100) {
        return true;
    }
    // –ê—Ä–∫—Ç–∏–∫–∞
    if (lat > 80) return true;
    // –ê–Ω—Ç–∞—Ä–∫—Ç–∏–∫–∞
    if (lat < -65) return true;
    
    return false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
async function getLocationInfo(lat, lng) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    const cacheKey = `${lat.toFixed(2)},${lng.toFixed(2)}`;
    if (geoCache.has(cacheKey)) {
        return geoCache.get(cacheKey);
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ–≤–∏–¥–Ω–æ–π –≤–æ–¥—ã
    if (quickWaterCheck(lat, lng)) {
        const result = { type: 'water', country_code: null };
        geoCache.set(cacheKey, result);
        return result;
    }
    
    try {
        // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à geocode API
        const response = await fetch(
            `${process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000'}/api/geocode`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ lat, lng }),
                signal: AbortSignal.timeout(3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
            }
        );
        
        if (response.ok) {
            const data = await response.json();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if (geoCache.size > MAX_CACHE_SIZE) {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                const toDelete = Math.floor(MAX_CACHE_SIZE / 4);
                const keys = Array.from(geoCache.keys()).slice(0, toDelete);
                keys.forEach(key => geoCache.delete(key));
            }
            geoCache.set(cacheKey, data);
            
            return data;
        }
    } catch (error) {
        console.error('Geocoding failed:', error);
    }
    
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    return {
        type: 'land',
        country_code: getFallbackCountryCode(lat, lng)
    };
}

// Fallback –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
function getFallbackCountryCode(lat, lng) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
    if (lat > 41 && lat < 82 && lng > 27 && lng < 180) return 'RU';
    if (lat > 24 && lat < 50 && lng > -130 && lng < -65) return 'US';
    if (lat > 45 && lat < 75 && lng > -140 && lng < -50) return 'CA';
    if (lat > -35 && lat < 6 && lng > -74 && lng < -34) return 'BR';
    if (lat > 18 && lat < 54 && lng > 73 && lng < 135) return 'CN';
    if (lat > -44 && lat < -10 && lng > 112 && lng < 154) return 'AU';
    if (lat > 6 && lat < 36 && lng > 68 && lng < 98) return 'IN';
    if (lat > 41 && lat < 51.5 && lng > -5 && lng < 9.5) return 'FR';
    if (lat > 47 && lat < 55.5 && lng > 5.5 && lng < 15.5) return 'DE';
    if (lat > 57 && lat < 72 && lng > 4 && lng < 32) {
        if (lng < 25 || lat > 68) return 'NO';
    }
    return 'XX';
}

// –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
const countryNames = {
    'RU': 'üá∑üá∫ –†–æ—Å—Å–∏—è',
    'US': 'üá∫üá∏ –°–®–ê',
    'CA': 'üá®üá¶ –ö–∞–Ω–∞–¥–∞',
    'BR': 'üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è',
    'CN': 'üá®üá≥ –ö–∏—Ç–∞–π',
    'AU': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'IN': 'üáÆüá≥ –ò–Ω–¥–∏—è',
    'FR': 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è',
    'DE': 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
    'IT': 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
    'ES': 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è',
    'GB': 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
    'JP': 'üáØüáµ –Ø–ø–æ–Ω–∏—è',
    'MX': 'üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞',
    'AR': 'üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞',
    'NO': 'üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è',
    'SE': 'üá∏üá™ –®–≤–µ—Ü–∏—è',
    'FI': 'üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è',
    'DK': 'üá©üá∞ –î–∞–Ω–∏—è',
    'XX': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
};

export default async function handler(req, res) {
    // CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const { cells, playerId, timestamp } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!cells || !Array.isArray(cells)) {
            return res.status(400).json({ error: 'Invalid cells data' });
        }
        
        if (cells.length === 0) {
            return res.status(400).json({ error: 'Empty batch' });
        }
        
        if (cells.length > MAX_CELLS_PER_BATCH) {
            return res.status(400).json({ 
                error: `Batch too large. Maximum ${MAX_CELLS_PER_BATCH} cells per batch` 
            });
        }
        
        // Rate limiting
        const clientIp = req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown';
        const now = Date.now();
        
        for (const [ip, data] of rateLimits.entries()) {
            if (now - data.windowStart > RATE_LIMIT_WINDOW) {
                rateLimits.delete(ip);
            }
        }
        
        let ipData = rateLimits.get(clientIp);
        if (!ipData) {
            ipData = { windowStart: now, requests: 0 };
            rateLimits.set(clientIp, ipData);
        }
        
        if (now - ipData.windowStart <= RATE_LIMIT_WINDOW) {
            ipData.requests++;
            if (ipData.requests > MAX_REQUESTS_PER_WINDOW) {
                return res.status(429).json({ 
                    error: 'Rate limit exceeded',
                    retryAfter: Math.ceil((RATE_LIMIT_WINDOW - (now - ipData.windowStart)) / 1000)
                });
            }
        } else {
            ipData.windowStart = now;
            ipData.requests = 1;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏
        const validLandCells = [];
        const waterCells = [];
        const countryCounts = {};
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        const cellPromises = cells.map(async (cell) => {
            if (typeof cell !== 'string') return null;
            
            const parts = cell.split(',');
            if (parts.length !== 2) return null;
            
            const lat = parseFloat(parts[0]);
            const lng = parseFloat(parts[1]);
            
            if (isNaN(lat) || isNaN(lng) || 
                lat < -90 || lat > 90 || 
                lng < -180 || lng > 180) {
                return null;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
            const locationInfo = await getLocationInfo(lat, lng);
            
            return {
                cell,
                lat,
                lng,
                type: locationInfo.type,
                country_code: locationInfo.country_code
            };
        });
        
        const results = await Promise.all(cellPromises);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (const result of results) {
            if (!result) continue;
            
            if (result.type === 'water' || 
                result.type === 'international_waters' || 
                result.type === 'ocean') {
                waterCells.push(result.cell);
                console.log(`Water cell rejected: ${result.cell}`);
            } else {
                validLandCells.push(result.cell);
                
                // –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
                if (result.country_code) {
                    countryCounts[result.country_code] = (countryCounts[result.country_code] || 0) + 1;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
                    if (result.country_code === 'NO') {
                        console.log(`–ù–æ—Ä–≤–µ–≥–∏—è: ${result.lat}, ${result.lng}`);
                    }
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–µ—Ç–∫–∏ —Å—É—à–∏
        if (validLandCells.length > 0) {
            const gameStateKey = 'revealed:cells';
            await redis.sadd(gameStateKey, ...validLandCells);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º timeline
            const timelineKey = 'revealed:timeline';
            const currentTime = Date.now();
            
            for (const cell of validLandCells) {
                await redis.zadd(timelineKey, {
                    score: currentTime,
                    member: `${cell}:${playerId || 'anonymous'}`
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç—Ä–∞–Ω
            for (const [code, count] of Object.entries(countryCounts)) {
                await redis.hincrby('country:revealed:count', code, count);
            }
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            const oneHourAgo = currentTime - (60 * 60 * 1000);
            await redis.zremrangebyscore(timelineKey, '-inf', oneHourAgo);
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalRevealed = await redis.scard('revealed:cells') || 0;
        
        // –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏
        const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);
        const recentActivity = await redis.zrange('revealed:timeline', fiveMinutesAgo, Date.now(), {
            byScore: true
        }) || [];
        
        const uniquePlayers = new Set();
        recentActivity.forEach(item => {
            if (item && item.member) {
                const parts = item.member.split(':');
                if (parts[parts.length - 1]) {
                    uniquePlayers.add(parts[parts.length - 1]);
                }
            }
        });
        
        const onlinePlayers = Math.max(1, uniquePlayers.size);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log(`Batch: ${validLandCells.length} land, ${waterCells.length} water cells from ${clientIp}`);
        if (Object.keys(countryCounts).length > 0) {
            console.log('Countries:', countryCounts);
        }
        
        res.status(200).json({
            success: true,
            processed: validLandCells.length,
            rejected: cells.length - validLandCells.length,
            water_cells: waterCells.length,
            totalRevealed,
            onlinePlayers,
            countries: countryCounts
        });
        
    } catch (error) {
        console.error('Batch processing error:', error);
        res.status(500).json({ 
            error: 'Failed to process batch',
            message: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö API
export { countryNames };